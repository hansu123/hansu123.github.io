<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax的两种写法</title>
      <link href="/2019/01/13/Ajax%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2019/01/13/Ajax%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>Ajax:(Asynchronous Javascript And XML)</strong><br><br>简称为异步的js和xml</p><a id="more"></a><p>Js中有两种写法：原生Js和JQuery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//原生js写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> result=xhr.responseText;</span><br><span class="line">alert(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'demo/login'</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//jquery封装后的写法</span></span><br><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">url:<span class="string">"demo/login"</span>,</span><br><span class="line">data:<span class="string">"uname=hansu"</span>,</span><br><span class="line">success:<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;alert(data);&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$.get(<span class="string">"demo/login"</span>,&#123;<span class="attr">uname</span>:<span class="string">'hansu'</span>&#125;,(data,status)=&gt;&#123;alert(data+<span class="string">":"</span>+status);&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于css的一些坑</title>
      <link href="/2019/01/12/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2019/01/12/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p><strong>一.元素的分类</strong></p><p>1.块级元素:<br>默认占一行，可以设置宽高，可以设置内外边距，会继承父级元素的宽度<br>如：div,h1-h6,p,ul,ol,li…<br><a id="more"></a><br>2.行内元素:<br>横排显示，不可以设置宽高，上下外边距无效，可以设置上下内边距，但不会因此撑大父容器的文档流。<br>如：a，select，span，i，em<br>所以想给a标签设置宽高要设置display:inline-block;</p><p>3.行内块元素:<br>横排显示，可以设置宽高，可以设置内外边距，两个并排显示的行内块元素，它们上下的间隔距离，以其中最大的间距为主<br>如：img，input</p><p><strong>二.外边距的特殊效果</strong><br></p><p>1.外边距合并<br>当两个垂直外边距相遇时，他们将合并成一个，最终的距离取决于较大值<br>2.行内元素对外边距表现<br>行内元素垂直外边距无效（img 除外）<br>行内块对外边距的表现<br>同一行中，一个行内块设置了外边距，其他同行的行内块会跟着发生变化</p><p><strong>3.外边距溢出</strong><br></p><p>在特殊的条件下，为子元素设置上外边距，会作用到父元素</p><p>条件:<br><br>1.父元素没有上边框</p><p>2.为第一个子元素设置上外边距<br><br><img src="/2019/01/12/关于css的一些坑/css/01.png" alt=""></p><p>解决方案：</p><p>1.为父元素添加上边框 弊端：影响了父元素的实际高度</p><p>2.为父元素添加上内边距 弊端：影响了父元素的实际高度</p><p>3.在父元素第一个子元素的位置，添加一个空的table标签</p><p><strong>三.理解浮动</strong></p><p>1,默认文档流<br>元素按照从左到右，从上往下排列</p><p>2.浮动<br>当元素设置浮动之后，该元素脱离默认文档流，<strong>后面的非浮动元素会上前补位。</strong><br>当前元素会在当前行，向左或者向右排列</p><font color="red"><strong>也就是说浮动元素浮动到了垂直的上一层，而默认文档流中的元素，依然会根据默认方式排列。</strong></font><p><strong>四.高度坍塌</strong></p><p>块级元素的高度如果不设置，高度以内部元素内容为准<br>但是如果内部元素都是浮动元素，浮动元素不占据页面控件<br>父元素的高，没有了</p><p><img src="/2019/01/12/关于css的一些坑/css/02.png" alt=""></p><p>解决方案：</p><p>1.直接为父元素设置高度<br>弊端：不知道父元素的高度</p><p>2.父元素也浮动<br>弊端：浮动会影响后续元素<br>3.overflow:hidden<br>弊端：当元素真的需要显示溢出内容的时候，就显示不出来了<br>4.在父元素中追加一个空的块级元素，并设置clear:both</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css布局 </tag>
            
            <tag> css基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
